{
  "address": "0x68E683ccC6e3307c6E03221f8B554AE229750B4B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "roscaAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "roscaCreator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "roscaName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imgLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "authCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "goalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ctbAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ctbDay",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ctbOccur",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "disbDay",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "disbOccur",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct RoscaDetails",
          "name": "RD",
          "type": "tuple"
        }
      ],
      "name": "CreatedRosca",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "cUSDToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "roscaName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imgLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "authCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "goalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ctbAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ctbDay",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ctbOccur",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "disbDay",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "disbOccur",
              "type": "string"
            }
          ],
          "internalType": "struct RoscaDetails",
          "name": "rD",
          "type": "tuple"
        }
      ],
      "name": "createRosca",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnSpaces",
      "outputs": [
        {
          "internalType": "contract Rosca[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roscas",
      "outputs": [
        {
          "internalType": "contract Rosca",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1c096f27c82db0371088fe27427f16b85be042be77077f2676034512cdf06ba",
  "receipt": {
    "to": null,
    "from": "0xDd7a678D205dc8678913cE378BBd39CB436078c1",
    "contractAddress": "0x68E683ccC6e3307c6E03221f8B554AE229750B4B",
    "transactionIndex": 0,
    "gasUsed": "4887555",
    "logsBloom": "0x
    "blockHash": "0x200a4df3e3d08f3d7e16c9072050a54ece5048d3dd0b108b95364dc8ea52c53e",
    "transactionHash": "0xa1c096f27c82db0371088fe27427f16b85be042be77077f2676034512cdf06ba",
    "logs": [],
    "blockNumber": 13662285,
    "cumulativeGasUsed": "4887555",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "2a9388ace48e50b7cccf03c991e1351a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roscaAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roscaCreator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"roscaName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imgLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"authCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"goalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ctbAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ctbDay\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ctbOccur\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"disbDay\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"disbOccur\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct RoscaDetails\",\"name\":\"RD\",\"type\":\"tuple\"}],\"name\":\"CreatedRosca\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"cUSDToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"roscaName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imgLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"authCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"goalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ctbAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ctbDay\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ctbOccur\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"disbDay\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"disbOccur\",\"type\":\"string\"}],\"internalType\":\"struct RoscaDetails\",\"name\":\"rD\",\"type\":\"tuple\"}],\"name\":\"createRosca\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnSpaces\",\"outputs\":[{\"internalType\":\"contract Rosca[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roscas\",\"outputs\":[{\"internalType\":\"contract Rosca\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Spaces.sol\":\"Spaces\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Rosca.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.7;\\n\\n// Importing OpenZeppelin's SafeMath Implementation\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./utils.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct RoscaDetails {\\n    string roscaName;\\n    string imgLink;\\n    string authCode;\\n    uint256 goalAmount;\\n    uint256 ctbAmount;\\n    string ctbDay;\\n    string ctbOccur;\\n    string disbDay;\\n    string disbOccur;\\n}\\n\\ncontract Rosca {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    enum RoundState {\\n        isOpen,\\n        isClosed,\\n        isPayedOut\\n    }\\n\\n    enum RoscaState {\\n        isStarting,\\n        isLive,\\n        isEnded,\\n        isInActive\\n    }\\n\\n    IERC20 private cUSDToken;\\n\\n    //Initialize public variables\\n    address payable[] public members;\\n    address payable[] admins;\\n    address payable dueMember;\\n    mapping(address => uint) public contributions;\\n    mapping(address => bool) isMember;\\n    mapping(address => bool) isPotted;\\n    mapping(address => bool) isCtbCleared;\\n    RoscaDetails RD;\\n    uint256 roscaBalance;\\n    uint256 goalBalance;\\n    uint256 ctbAmount;\\n    uint roundNo;\\n    uint ctbDeadline;\\n    uint disbDeadline;\\n\\n    //Initialize states\\n    RoscaState public rcState = RoscaState.isStarting;\\n    RoundState public rdState = RoundState.isOpen;\\n\\n    //state modifiers\\n    modifier roscaState(RoscaState _state) {\\n        require(rcState == _state);\\n        _;\\n    }\\n\\n    modifier roundState(RoundState _state) {\\n        require(rdState == _state);\\n        _;\\n    }\\n\\n    // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n\\n    constructor(\\n        IERC20 token,\\n        address payable _creator,\\n        RoscaDetails memory _rD\\n    ) {\\n        cUSDToken = token;\\n        roscaBalance = 0;\\n        goalBalance = 0;\\n        RD = _rD;\\n        admins.push(_creator);\\n        members.push(_creator);\\n        isMember[_creator] = true;\\n        //Evaluate whether to create a round before all memebers have joined.\\n        //Creates round with creator being 1st receiver\\n        createRound();\\n    }\\n\\n    function getDetails()\\n        public\\n        view\\n        returns (\\n            string memory roscaName,\\n            string memory imgLink,\\n            uint goalAmount,\\n            string memory ctbDay,\\n            string memory ctbOccur,\\n            string memory disbDay,\\n            string memory disbOccur,\\n            uint activeMembers,\\n            uint currentRound,\\n            address creator,\\n            uint256 roscaBal\\n        )\\n    {\\n        roscaName = RD.roscaName;\\n        imgLink = RD.imgLink;\\n        goalAmount = RD.goalAmount;\\n        ctbDay = RD.ctbDay;\\n        ctbOccur = RD.ctbOccur;\\n        disbDay = RD.disbDay;\\n        disbOccur = RD.disbOccur;\\n        currentRound = roundNo;\\n        creator = admins[0];\\n        activeMembers = members.length;\\n        roscaBal = roscaBalance;\\n        return (\\n            roscaName,\\n            imgLink,\\n            goalAmount,\\n            ctbDay,\\n            ctbOccur,\\n            disbDay,\\n            disbOccur,\\n            activeMembers,\\n            currentRound,\\n            creator,\\n            roscaBal\\n        );\\n    }\\n\\n    function getMembers() external view returns (address payable[] memory) {\\n        return members;\\n    }\\n\\n    function getRoscaBalance() public view returns (uint256) {\\n        address roscaAddress = address(this);\\n        return cUSDToken.balanceOf(roscaAddress);\\n    }\\n\\n    function getMemberBalance() public view returns (uint256) {\\n        return cUSDToken.balanceOf(members[0]);\\n    }\\n\\n    function joinRosca(string calldata authCode) external {\\n        require(\\n            keccak256(abi.encode(authCode)) ==\\n                keccak256(abi.encode(RD.authCode)),\\n            \\\"Invalid authorization code!\\\"\\n        );\\n        require(isMember[msg.sender] == false, \\\"You are already a Member\\\");\\n        members.push(payable(msg.sender));\\n        isMember[msg.sender] = true;\\n    }\\n\\n    event CreatedRound(\\n        uint roundNo,\\n        uint ctbDeadline,\\n        uint disbDeadline,\\n        address payable dueMember\\n    );\\n\\n    function createRound() internal {\\n        uint ctbDay = _getDayNo(RD.ctbDay);\\n        uint disbDay = _getDayNo(RD.disbDay);\\n        ctbDeadline = nextDayAndTime(ctbDay);\\n        disbDeadline = nextDayAndTime(disbDay);\\n        if (rcState == RoscaState.isStarting) {\\n            roundNo = 1;\\n            dueMember = members[roundNo - 1];\\n            rcState = RoscaState.isLive;\\n            rdState = RoundState.isOpen;\\n            ctbDeadline = nextDayAndTime(ctbDay);\\n            disbDeadline = nextDayAndTime(disbDay);\\n        } else {\\n            if (roundNo >= members.length) {\\n                roundNo = 0;\\n            }\\n            roundNo += 1;\\n            dueMember = members[roundNo - 1];\\n            rdState = RoundState.isOpen;\\n            ctbDeadline += 7 days;\\n            disbDeadline += 7 days;\\n        }\\n\\n        emit CreatedRound(roundNo, ctbDeadline, disbDeadline, dueMember);\\n    }\\n\\n    //Fund the round\\n    function fundRound(uint256 amount)\\n        external\\n        payable\\n        roundState(RoundState.isOpen)\\n    {\\n        uint balance = cUSDToken.balanceOf(msg.sender);\\n        console.log(balance);\\n        require(goalBalance < RD.goalAmount, \\\"Round is fully funded\\\");\\n        require(balance > amount, \\\"Insufficient funds\\\");\\n        //require(msg.sender != dueMember, \\\"It's your round. Relax!\\\");\\n        require(\\n            contributions[msg.sender] < RD.ctbAmount,\\n            \\\"You have fully contributed to this Round\\\"\\n        );\\n        //change to be transfer with cUSDToken\\n        //cUSDToken.approve(address(this), amount);\\n        //payable(msg.sender).transfer(amount);\\n        //cUSDToken.transferFrom(msg.sender, address(this), amount);\\n        (\\n            bool sent, /*bytes memory data*/\\n\\n        ) = address(this).call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send CELO\\\");\\n        contributions[msg.sender] = contributions[msg.sender].add(amount);\\n        goalBalance = goalBalance.add(amount);\\n        roscaBalance = getRoscaBalance();\\n        if (goalBalance == RD.goalAmount) {\\n            rdState = RoundState.isClosed;\\n        }\\n    }\\n\\n    /*\\n    /// Not enough funds for transfer. Requested `requested`,\\n    /// but only `available` available.\\n    error NotEnoughFunds(uint requested, uint available);\\n    */\\n    event PaidoutRound(address payedMember, uint256 paidAmount, uint roundNo);\\n\\n    //Payout the round\\n    // !Payout at the given Payout deadline.\\n    function payoutRound() public payable returns (bool payedout) {\\n        uint256 balance = getRoscaBalance();\\n        require(goalBalance == RD.goalAmount, \\\"The round is not fully funded\\\");\\n        require(balance >= RD.goalAmount, \\\"Your chamaa is low on funds\\\");\\n        require(isMember[dueMember], \\\"Due member is not a member! Reary?!\\\");\\n        //change to be transfer with cUSDToken\\n        //cUSDToken.transferFrom(address(this), dueMember, RD.goalAmount);\\n        /*(bool sent, /*bytes memory data) = dueMember.call{value: (RD.goalAmount * 1 ether) }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");*/\\n        if (cUSDToken.transfer(dueMember, RD.goalAmount)) {\\n            goalBalance = 0;\\n            //Reset Contributons\\n            for (uint i = 0; i < members.length; i++) {\\n                contributions[members[i]] = 0;\\n            }\\n            isPotted[dueMember] = true;\\n            rdState = RoundState.isPayedOut;\\n            roscaBalance = getRoscaBalance();\\n            emit PaidoutRound(dueMember, RD.goalAmount, roundNo);\\n            //Create another round\\n            createRound();\\n            return true;\\n        }\\n    }\\n\\n    function withdrawFunds() external payable returns (bool withdrawn) {\\n        require(rdState != RoundState.isPayedOut, \\\"Already PayedOut\\\");\\n        require(msg.sender == dueMember, \\\"This is not your round\\\");\\n        if (payoutRound()) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // schDay: 1. Monday 7. Sunday //schOcurr: 1-daily, 7-weekly, 28-monthly\\n    //Handled weekly for now. !TODO: handle daily and monthly\\n    function nextDayAndTime(uint schDay)\\n        internal\\n        view\\n        returns (uint nextTimeStamp)\\n    {\\n        uint day;\\n        uint month;\\n        uint year;\\n        uint _days = block.timestamp / (24 * 60 * 60);\\n        uint dayOfWeek = ((_days + 3) % 7) + 1;\\n        (year, month, day) = utils._daysToDate(_days);\\n        uint nextDay = day + ((7 + schDay - dayOfWeek) % 7);\\n\\n        nextTimeStamp =\\n            utils._daysFromDate(year, month, nextDay) *\\n            (24 * 60 * 60);\\n\\n        if (nextTimeStamp <= block.timestamp) {\\n            nextDay = nextDay + 7;\\n            nextTimeStamp = nextTimeStamp + 7 days;\\n        }\\n\\n        return (nextTimeStamp);\\n    }\\n\\n    function _getDayNo(string storage day) internal pure returns (uint dayNo) {\\n        string[7] memory weekList = [\\n            \\\"Monday\\\",\\n            \\\"Tuesday\\\",\\n            \\\"Wednesday\\\",\\n            \\\"Thursday\\\",\\n            \\\"Friday\\\",\\n            \\\"Saturday\\\",\\n            \\\"Sunday\\\"\\n        ];\\n        bytes32 encodedElement = keccak256(abi.encode(day));\\n        for (uint i = 0; i < weekList.length; i++) {\\n            if (encodedElement == keccak256(abi.encode(weekList[i]))) {\\n                return i + 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x110af3865b85f52836db59a7ea41becf2a15fdc7ac74b124f812849a71b12588\",\"license\":\"Apache 2.0\"},\"contracts/Spaces.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.7;\\n\\n// Importing OpenZeppelin's SafeMath Implementation\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./Rosca.sol\\\";\\n\\ncontract Spaces {\\n    using SafeMath for uint256;\\n    using SafeMath for uint;\\n\\n    //List of all spaces\\n    Rosca[] public roscas;\\n\\n    //event for when a new rosca is created\\n    event CreatedRosca(\\n        address roscaAddress,\\n        address roscaCreator,\\n        RoscaDetails RD\\n    );\\n\\n    function createRosca(IERC20 cUSDToken, RoscaDetails memory rD) external {\\n        Rosca newRosca = new Rosca(cUSDToken, payable(msg.sender), rD);\\n\\n        roscas.push(newRosca);\\n\\n        emit CreatedRosca(address(newRosca), msg.sender, rD);\\n    }\\n\\n    function returnSpaces() external view returns (Rosca[] memory) {\\n        return roscas;\\n    }\\n}\\n\",\"keccak256\":\"0x4dbd38044b32cc9196131e3597bcfea8f7563e74ebdcfb7e0be33578b0f0c4d7\",\"license\":\"Apache 2.0\"},\"contracts/utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.7;\\n\\nlibrary utils {\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    function _daysFromDate(\\n        uint year,\\n        uint month,\\n        uint day\\n    ) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    function _daysToDate(uint _days)\\n        internal\\n        pure\\n        returns (\\n            uint year,\\n            uint month,\\n            uint day\\n        )\\n    {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int _month = (80 * L) / 2447;\\n        int _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n}\\n\",\"keccak256\":\"0x7811490442d25b862e19cafa1434b419e12fd76ad32a1ddc3bbad5efa54bb835\",\"license\":\"Apache 2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80632fd76fe5146200004b57806387e168991462000081578063cf8d4e3d14620000a3575b600080fd5b620000696004803603810190620000639190620002d6565b620000c3565b60405162000078919062000393565b60405180910390f35b6200008b62000103565b6040516200009a91906200047e565b60405180910390f35b620000c16004803603810190620000bb919062000837565b62000193565b005b60008181548110620000d457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200018957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200013e575b5050505050905090565b6000823383604051620001a69062000279565b620001b49392919062000aa0565b604051809103906000f080158015620001d1573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507faf7c8d4cffff8eaaf44f10d975f1c71cc0df6e55c89b6c15106c0ba1f66e7d3e8133846040516200026c9392919062000af5565b60405180910390a1505050565b614c838062000b3a83390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620002b0816200029b565b8114620002bc57600080fd5b50565b600081359050620002d081620002a5565b92915050565b600060208284031215620002ef57620002ee62000291565b5b6000620002ff84828501620002bf565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620003536200034d620003478462000308565b62000328565b62000308565b9050919050565b6000620003678262000332565b9050919050565b60006200037b826200035a565b9050919050565b6200038d816200036e565b82525050565b6000602082019050620003aa600083018462000382565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620003e7816200036e565b82525050565b6000620003fb8383620003dc565b60208301905092915050565b6000602082019050919050565b60006200042182620003b0565b6200042d8185620003bb565b93506200043a83620003cc565b8060005b8381101562000471578151620004558882620003ed565b9750620004628362000407565b9250506001810190506200043e565b5085935050505092915050565b600060208201905081810360008301526200049a818462000414565b905092915050565b6000620004af8262000308565b9050919050565b6000620004c382620004a2565b9050919050565b620004d581620004b6565b8114620004e157600080fd5b50565b600081359050620004f581620004ca565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200054b8262000500565b810181811067ffffffffffffffff821117156200056d576200056c62000511565b5b80604052505050565b60006200058262000287565b905062000590828262000540565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115620005c257620005c162000511565b5b620005cd8262000500565b9050602081019050919050565b82818337600083830152505050565b600062000600620005fa84620005a4565b62000576565b9050828152602081018484840111156200061f576200061e6200059f565b5b6200062c848285620005da565b509392505050565b600082601f8301126200064c576200064b6200059a565b5b81356200065e848260208601620005e9565b91505092915050565b60006101208284031215620006815762000680620004fb565b5b6200068e61012062000576565b9050600082013567ffffffffffffffff811115620006b157620006b062000595565b5b620006bf8482850162000634565b600083015250602082013567ffffffffffffffff811115620006e657620006e562000595565b5b620006f48482850162000634565b602083015250604082013567ffffffffffffffff8111156200071b576200071a62000595565b5b620007298482850162000634565b60408301525060606200073f84828501620002bf565b60608301525060806200075584828501620002bf565b60808301525060a082013567ffffffffffffffff8111156200077c576200077b62000595565b5b6200078a8482850162000634565b60a08301525060c082013567ffffffffffffffff811115620007b157620007b062000595565b5b620007bf8482850162000634565b60c08301525060e082013567ffffffffffffffff811115620007e657620007e562000595565b5b620007f48482850162000634565b60e08301525061010082013567ffffffffffffffff8111156200081c576200081b62000595565b5b6200082a8482850162000634565b6101008301525092915050565b6000806040838503121562000851576200085062000291565b5b60006200086185828601620004e4565b925050602083013567ffffffffffffffff81111562000885576200088462000296565b5b620008938582860162000667565b9150509250929050565b6000620008aa8262000332565b9050919050565b6000620008be826200089d565b9050919050565b620008d081620008b1565b82525050565b6000620008e38262000308565b9050919050565b620008f581620008d6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620009375780820151818401526020810190506200091a565b8381111562000947576000848401525b50505050565b60006200095a82620008fb565b62000966818562000906565b93506200097881856020860162000917565b620009838162000500565b840191505092915050565b62000999816200029b565b82525050565b6000610120830160008301518482036000860152620009bf82826200094d565b91505060208301518482036020860152620009db82826200094d565b91505060408301518482036040860152620009f782826200094d565b915050606083015162000a0e60608601826200098e565b50608083015162000a2360808601826200098e565b5060a083015184820360a086015262000a3d82826200094d565b91505060c083015184820360c086015262000a5982826200094d565b91505060e083015184820360e086015262000a7582826200094d565b91505061010083015184820361010086015262000a9382826200094d565b9150508091505092915050565b600060608201905062000ab76000830186620008c5565b62000ac66020830185620008ea565b818103604083015262000ada81846200099f565b9050949350505050565b62000aef81620004a2565b82525050565b600060608201905062000b0c600083018662000ae4565b62000b1b602083018562000ae4565b818103604083015262000b2f81846200099f565b905094935050505056fe60806040526000601760006101000a81548160ff021916908360038111156200002d576200002c62000e00565b5b02179055506000601760016101000a81548160ff021916908360028111156200005b576200005a62000e00565b5b02179055503480156200006d57600080fd5b5060405162004c8338038062004c8383398181016040528101906200009391906200129f565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601181905550600060128190555080600860008201518160000190805190602001906200010492919062000d50565b5060208201518160010190805190602001906200012392919062000d50565b5060408201518160020190805190602001906200014292919062000d50565b50606082015181600301556080820151816004015560a08201518160050190805190602001906200017592919062000d50565b5060c08201518160060190805190602001906200019492919062000d50565b5060e0820151816007019080519060200190620001b392919062000d50565b50610100820151816008019080519060200190620001d392919062000d50565b509050506002829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620003056200030e60201b60201c565b50505062001a59565b60006200032560086005016200067560201b60201c565b905060006200033e60086007016200067560201b60201c565b90506200035182620008de60201b60201c565b6015819055506200036881620008de60201b60201c565b6016819055506000600381111562000385576200038462000e00565b5b601760009054906101000a900460ff166003811115620003aa57620003a962000e00565b5b1415620004da576001601481905550600180601454620003cb919062001349565b81548110620003df57620003de62001384565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601760006101000a81548160ff0219169083600381111562000473576200047262000e00565b5b02179055506000601760016101000a81548160ff02191690836002811115620004a157620004a062000e00565b5b0217905550620004b782620008de60201b60201c565b601581905550620004ce81620008de60201b60201c565b6016819055506200060a565b60018054905060145410620004f25760006014819055505b600160146000828254620005079190620013b3565b9250508190555060018060145462000520919062001349565b8154811062000534576200053362001384565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601760016101000a81548160ff02191690836002811115620005c857620005c762000e00565b5b021790555062093a8060156000828254620005e49190620013b3565b9250508190555062093a8060166000828254620006029190620013b3565b925050819055505b7fc641121d80663aede9804c3bfaba45a29038d67ec846178c73e6d86afeabc936601454601554601654600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162000669949392919062001432565b60405180910390a15050565b6000806040518060e001604052806040518060400160405280600681526020017f4d6f6e646179000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f547565736461790000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f5765646e6573646179000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f546875727364617900000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f467269646179000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f536174757264617900000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f53756e6461790000000000000000000000000000000000000000000000000000815250815250905060008360405160200162000835919062001596565b60405160208183030381529060405280519060200120905060005b6007811015620008d55782816007811062000870576200086f62001384565b5b602002015160405160200162000887919062001606565b60405160208183030381529060405280519060200120821415620008bf57600181620008b49190620013b3565b9350505050620008d9565b8080620008cc906200162a565b91505062000850565b5050505b919050565b60008060008060006201518042620008f79190620016a7565b90506000600160076003846200090e9190620013b3565b6200091a9190620016df565b620009269190620013b3565b90506200093e82620009e760201b620014061760201c565b80975081965082955050505060006007828960076200095e9190620013b3565b6200096a919062001349565b620009769190620016df565b86620009839190620013b3565b905062015180620009a185878462000bbe60201b620015a51760201c565b620009ad919062001717565b9650428711620009dc57600781620009c69190620013b3565b905062093a8087620009d99190620013b3565b96505b505050505050919050565b600080600080849050600062253d8c62010bd98362000a07919062001782565b62000a13919062001782565b9050600062023ab182600462000a2a919062001820565b62000a36919062001947565b9050600460038262023ab162000a4d919062001820565b62000a59919062001782565b62000a65919062001947565b8262000a729190620019bb565b9150600062164b0960018462000a89919062001782565b610fa062000a98919062001820565b62000aa4919062001947565b9050601f6004826105b562000aba919062001820565b62000ac6919062001947565b8462000ad39190620019bb565b62000adf919062001782565b9250600061098f84605062000af5919062001820565b62000b01919062001947565b9050600060508261098f62000b17919062001820565b62000b23919062001947565b8562000b309190620019bb565b9050600b8262000b41919062001947565b945084600c62000b52919062001820565b60028362000b61919062001782565b62000b6d9190620019bb565b9150848360318662000b809190620019bb565b606462000b8e919062001820565b62000b9a919062001782565b62000ba6919062001782565b92508298508197508096505050505050509193909250565b60006107b284101562000bd057600080fd5b600084905060008490506000849050600062253d8c60046064600c600e8762000bfa9190620019bb565b62000c06919062001947565b6113248862000c16919062001782565b62000c22919062001782565b62000c2e919062001947565b600362000c3c919062001820565b62000c48919062001947565b600c80600c600e8862000c5c9190620019bb565b62000c68919062001947565b62000c74919062001820565b60028762000c839190620019bb565b62000c8f9190620019bb565b61016f62000c9e919062001820565b62000caa919062001947565b6004600c600e8862000cbd9190620019bb565b62000cc9919062001947565b6112c08962000cd9919062001782565b62000ce5919062001782565b6105b562000cf4919062001820565b62000d00919062001947565b617d4b8662000d109190620019bb565b62000d1c919062001782565b62000d28919062001782565b62000d349190620019bb565b62000d409190620019bb565b9050809450505050509392505050565b82805462000d5e90620014ae565b90600052602060002090601f01602090048101928262000d82576000855562000dce565b82601f1062000d9d57805160ff191683800117855562000dce565b8280016001018555821562000dce579182015b8281111562000dcd57825182559160200191906001019062000db0565b5b50905062000ddd919062000de1565b5090565b5b8082111562000dfc57600081600090555060010162000de2565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000e708262000e43565b9050919050565b600062000e848262000e63565b9050919050565b62000e968162000e77565b811462000ea257600080fd5b50565b60008151905062000eb68162000e8b565b92915050565b600062000ec98262000e43565b9050919050565b62000edb8162000ebc565b811462000ee757600080fd5b50565b60008151905062000efb8162000ed0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000f518262000f06565b810181811067ffffffffffffffff8211171562000f735762000f7262000f17565b5b80604052505050565b600062000f8862000e2f565b905062000f96828262000f46565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111562000fc85762000fc762000f17565b5b62000fd38262000f06565b9050602081019050919050565b60005b838110156200100057808201518184015260208101905062000fe3565b8381111562001010576000848401525b50505050565b60006200102d620010278462000faa565b62000f7c565b9050828152602081018484840111156200104c576200104b62000fa5565b5b6200105984828562000fe0565b509392505050565b600082601f83011262001079576200107862000fa0565b5b81516200108b84826020860162001016565b91505092915050565b6000819050919050565b620010a98162001094565b8114620010b557600080fd5b50565b600081519050620010c9816200109e565b92915050565b60006101208284031215620010e957620010e862000f01565b5b620010f661012062000f7c565b9050600082015167ffffffffffffffff81111562001119576200111862000f9b565b5b620011278482850162001061565b600083015250602082015167ffffffffffffffff8111156200114e576200114d62000f9b565b5b6200115c8482850162001061565b602083015250604082015167ffffffffffffffff81111562001183576200118262000f9b565b5b620011918482850162001061565b6040830152506060620011a784828501620010b8565b6060830152506080620011bd84828501620010b8565b60808301525060a082015167ffffffffffffffff811115620011e457620011e362000f9b565b5b620011f28482850162001061565b60a08301525060c082015167ffffffffffffffff81111562001219576200121862000f9b565b5b620012278482850162001061565b60c08301525060e082015167ffffffffffffffff8111156200124e576200124d62000f9b565b5b6200125c8482850162001061565b60e08301525061010082015167ffffffffffffffff81111562001284576200128362000f9b565b5b620012928482850162001061565b6101008301525092915050565b600080600060608486031215620012bb57620012ba62000e39565b5b6000620012cb8682870162000ea5565b9350506020620012de8682870162000eea565b925050604084015167ffffffffffffffff81111562001302576200130162000e3e565b5b6200131086828701620010cf565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620013568262001094565b9150620013638362001094565b9250828210156200137957620013786200131a565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000620013c08262001094565b9150620013cd8362001094565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200140557620014046200131a565b5b828201905092915050565b6200141b8162001094565b82525050565b6200142c8162000ebc565b82525050565b600060808201905062001449600083018762001410565b62001458602083018662001410565b62001467604083018562001410565b62001476606083018462001421565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620014c757607f821691505b60208210811415620014de57620014dd6200147f565b5b50919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b600081546200151981620014ae565b620015258186620014e4565b9450600182166000811462001543576001811462001556576200158d565b60ff19831686526020860193506200158d565b6200156185620014f5565b60005b83811015620015855781548189015260018201915060208101905062001564565b808801955050505b50505092915050565b60006020820190508181036000830152620015b281846200150a565b905092915050565b600081519050919050565b6000620015d282620015ba565b620015de8185620014e4565b9350620015f081856020860162000fe0565b620015fb8162000f06565b840191505092915050565b60006020820190508181036000830152620016228184620015c5565b905092915050565b6000620016378262001094565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200166d576200166c6200131a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620016b48262001094565b9150620016c18362001094565b925082620016d457620016d362001678565b5b828204905092915050565b6000620016ec8262001094565b9150620016f98362001094565b9250826200170c576200170b62001678565b5b828206905092915050565b6000620017248262001094565b9150620017318362001094565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200176d576200176c6200131a565b5b828202905092915050565b6000819050919050565b60006200178f8262001778565b91506200179c8362001778565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615620017da57620017d96200131a565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156200181557620018146200131a565b5b828201905092915050565b60006200182d8262001778565b91506200183a8362001778565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156200187c576200187b6200131a565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615620018bc57620018bb6200131a565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615620018fc57620018fb6200131a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156200193c576200193b6200131a565b5b828202905092915050565b6000620019548262001778565b9150620019618362001778565b92508262001974576200197362001678565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615620019b057620019af6200131a565b5b828205905092915050565b6000620019c88262001778565b9150620019d58362001778565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161562001a135762001a126200131a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161562001a4e5762001a4d6200131a565b5b828203905092915050565b61321a8062001a696000396000f3fe6080604052600436106100ab5760003560e01c806369105f971161006457806369105f97146101be5780638ce65f30146101e95780639a71f55c146102125780639eab525314610230578063a88765c91461025b578063fbbf93a014610286576100b2565b80630dcfb2b8146100b457806324600fc3146100d057806342e94c90146100ee5780634a92041d1461012b5780635a8a68dc146101565780635daf08ca14610181576100b2565b366100b257005b005b6100ce60048036038101906100c99190611e61565b6102bb565b005b6100d861066f565b6040516100e59190611ea9565b60405180910390f35b3480156100fa57600080fd5b5061011560048036038101906101109190611f22565b610795565b6040516101229190611f5e565b60405180910390f35b34801561013757600080fd5b506101406107ad565b60405161014d9190611ff0565b60405180910390f35b34801561016257600080fd5b5061016b6107c0565b6040516101789190612053565b60405180910390f35b34801561018d57600080fd5b506101a860048036038101906101a39190611e61565b6107d3565b6040516101b5919061208f565b60405180910390f35b3480156101ca57600080fd5b506101d3610812565b6040516101e09190611f5e565b60405180910390f35b3480156101f557600080fd5b50610210600480360381019061020b919061210f565b610902565b005b61021a610ae8565b6040516102279190611ea9565b60405180910390f35b34801561023c57600080fd5b50610245610eea565b604051610252919061221a565b60405180910390f35b34801561026757600080fd5b50610270610f78565b60405161027d9190611f5e565b60405180910390f35b34801561029257600080fd5b5061029b61102d565b6040516102b29b9a999897969594939291906122e4565b60405180910390f35b60008060028111156102d0576102cf611f79565b5b601760019054906101000a900460ff1660028111156102f2576102f1611f79565b5b146102fc57600080fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161035891906123b9565b60206040518083038186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a891906123e9565b90506103b381611704565b600860030154601254106103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390612462565b60405180910390fd5b82811161043e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610435906124ce565b60405180910390fd5b600860040154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106104c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bb90612560565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff16846040516104ea906125b1565b60006040518083038185875af1925050503d8060008114610527576040519150601f19603f3d011682016040523d82523d6000602084013e61052c565b606091505b5050905080610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790612612565b60405180910390fd5b6105c284600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461179d90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061061a8460125461179d90919063ffffffff16565b601281905550610628610f78565b6011819055506008600301546012541415610669576001601760016101000a81548160ff0219169083600281111561066357610662611f79565b5b02179055505b50505050565b600060028081111561068457610683611f79565b5b601760019054906101000a900460ff1660028111156106a6576106a5611f79565b5b14156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de9061267e565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076e906126ea565b60405180910390fd5b61077f610ae8565b1561078d5760019050610792565b600090505b90565b60046020528060005260406000206000915090505481565b601760009054906101000a900460ff1681565b601760019054906101000a900460ff1681565b600181815481106107e357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a0823160016000815481106108665761086561270a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016108ad9190612798565b60206040518083038186803b1580156108c557600080fd5b505afa1580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd91906123e9565b905090565b600860020160405160200161091791906128a9565b604051602081830303815290604052805190602001208282604051602001610940929190612907565b6040516020818303038152906040528051906020012014610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90612977565b60405180910390fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a20906129e3565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080610af3610f78565b905060086003015460125414610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3590612a4f565b60405180910390fd5b600860030154811015610b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7d90612abb565b60405180910390fd5b60056000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b90612b4d565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166008600301546040518363ffffffff1660e01b8152600401610cb6929190612b6d565b602060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190612bc2565b15610ee557600060128190555060005b600180549050811015610dbb5760006004600060018481548110610d3f57610d3e61270a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080610db390612c1e565b915050610d18565b50600160066000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002601760016101000a81548160ff02191690836002811115610e5c57610e5b611f79565b5b0217905550610e69610f78565b6011819055507ff21642b842e81992004c95ed649c9b4e65bd1e3b1520b0a44b261d7594522288600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860030154601454604051610ecb93929190612c67565b60405180910390a1610edb6117b3565b6001915050610ee7565b505b90565b60606001805480602002602001604051908101604052809291908181526020018280548015610f6e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f24575b5050505050905090565b60008030905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401610fd791906123b9565b60206040518083038186803b158015610fef57600080fd5b505afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102791906123e9565b91505090565b60608060006060806060806000806000806008600001805461104e906127e2565b80601f016020809104026020016040519081016040528092919081815260200182805461107a906127e2565b80156110c75780601f1061109c576101008083540402835291602001916110c7565b820191906000526020600020905b8154815290600101906020018083116110aa57829003601f168201915b50505050509a50600860010180546110de906127e2565b80601f016020809104026020016040519081016040528092919081815260200182805461110a906127e2565b80156111575780601f1061112c57610100808354040283529160200191611157565b820191906000526020600020905b81548152906001019060200180831161113a57829003601f168201915b50505050509950600860030154985060086005018054611176906127e2565b80601f01602080910402602001604051908101604052809291908181526020018280546111a2906127e2565b80156111ef5780601f106111c4576101008083540402835291602001916111ef565b820191906000526020600020905b8154815290600101906020018083116111d257829003601f168201915b5050505050975060086006018054611206906127e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611232906127e2565b801561127f5780601f106112545761010080835404028352916020019161127f565b820191906000526020600020905b81548152906001019060200180831161126257829003601f168201915b5050505050965060086007018054611296906127e2565b80601f01602080910402602001604051908101604052809291908181526020018280546112c2906127e2565b801561130f5780601f106112e45761010080835404028352916020019161130f565b820191906000526020600020905b8154815290600101906020018083116112f257829003601f168201915b50505050509550600880018054611325906127e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611351906127e2565b801561139e5780601f106113735761010080835404028352916020019161139e565b820191906000526020600020905b81548152906001019060200180831161138157829003601f168201915b50505050509450601454925060026000815481106113bf576113be61270a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060018054905093506011549050909192939495969798999a565b600080600080849050600062253d8c62010bd9836114249190612ca8565b61142e9190612ca8565b9050600062023ab18260046114439190612d3c565b61144d9190612e82565b9050600460038262023ab16114629190612d3c565b61146c9190612ca8565b6114769190612e82565b826114819190612eec565b9150600062164b096001846114969190612ca8565b610fa06114a39190612d3c565b6114ad9190612e82565b9050601f6004826105b56114c19190612d3c565b6114cb9190612e82565b846114d69190612eec565b6114e09190612ca8565b9250600061098f8460506114f49190612d3c565b6114fe9190612e82565b9050600060508261098f6115129190612d3c565b61151c9190612e82565b856115279190612eec565b9050600b826115369190612e82565b945084600c6115459190612d3c565b6002836115529190612ca8565b61155c9190612eec565b9150848360318661156d9190612eec565b60646115799190612d3c565b6115839190612ca8565b61158d9190612ca8565b92508298508197508096505050505050509193909250565b60006107b28410156115b657600080fd5b600084905060008490506000849050600062253d8c60046064600c600e876115de9190612eec565b6115e89190612e82565b611324886115f69190612ca8565b6116009190612ca8565b61160a9190612e82565b60036116169190612d3c565b6116209190612e82565b600c80600c600e886116329190612eec565b61163c9190612e82565b6116469190612d3c565b6002876116539190612eec565b61165d9190612eec565b61016f61166a9190612d3c565b6116749190612e82565b6004600c600e886116859190612eec565b61168f9190612e82565b6112c08961169d9190612ca8565b6116a79190612ca8565b6105b56116b49190612d3c565b6116be9190612e82565b617d4b866116cc9190612eec565b6116d69190612ca8565b6116e09190612ca8565b6116ea9190612eec565b6116f49190612eec565b9050809450505050509392505050565b61179a816040516024016117189190611f5e565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ac6565b50565b600081836117ab9190612f80565b905092915050565b60006117c26008600501611aef565b905060006117d36008600701611aef565b90506117de82611d49565b6015819055506117ed81611d49565b6016819055506000600381111561180757611806611f79565b5b601760009054906101000a900460ff16600381111561182957611828611f79565b5b141561193c5760016014819055506001806014546118479190612fd6565b815481106118585761185761270a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601760006101000a81548160ff021916908360038111156118e9576118e8611f79565b5b02179055506000601760016101000a81548160ff0219169083600281111561191457611913611f79565b5b021790555061192282611d49565b60158190555061193181611d49565b601681905550611a5d565b600180549050601454106119535760006014819055505b6001601460008282546119669190612f80565b9250508190555060018060145461197d9190612fd6565b8154811061198e5761198d61270a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601760016101000a81548160ff02191690836002811115611a1f57611a1e611f79565b5b021790555062093a8060156000828254611a399190612f80565b9250508190555062093a8060166000828254611a559190612f80565b925050819055505b7fc641121d80663aede9804c3bfaba45a29038d67ec846178c73e6d86afeabc936601454601554601654600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611aba949392919061300a565b60405180910390a15050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000806040518060e001604052806040518060400160405280600681526020017f4d6f6e646179000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f547565736461790000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600981526020017f5765646e6573646179000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f546875727364617900000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f467269646179000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600881526020017f536174757264617900000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f53756e64617900000000000000000000000000000000000000000000000000008152508152509050600083604051602001611cad91906130e4565b60405160208183030381529060405280519060200120905060005b6007811015611d4057828160078110611ce457611ce361270a565b5b6020020151604051602001611cf99190613106565b60405160208183030381529060405280519060200120821415611d2d57600181611d239190612f80565b9350505050611d44565b8080611d3890612c1e565b915050611cc8565b5050505b919050565b60008060008060006201518042611d609190613128565b9050600060016007600384611d759190612f80565b611d7f9190613159565b611d899190612f80565b9050611d9482611406565b8097508196508295505050506000600782896007611db29190612f80565b611dbc9190612fd6565b611dc69190613159565b86611dd19190612f80565b905062015180611de28587846115a5565b611dec919061318a565b9650428711611e1657600781611e029190612f80565b905062093a8087611e139190612f80565b96505b505050505050919050565b600080fd5b600080fd5b6000819050919050565b611e3e81611e2b565b8114611e4957600080fd5b50565b600081359050611e5b81611e35565b92915050565b600060208284031215611e7757611e76611e21565b5b6000611e8584828501611e4c565b91505092915050565b60008115159050919050565b611ea381611e8e565b82525050565b6000602082019050611ebe6000830184611e9a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611eef82611ec4565b9050919050565b611eff81611ee4565b8114611f0a57600080fd5b50565b600081359050611f1c81611ef6565b92915050565b600060208284031215611f3857611f37611e21565b5b6000611f4684828501611f0d565b91505092915050565b611f5881611e2b565b82525050565b6000602082019050611f736000830184611f4f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611fb957611fb8611f79565b5b50565b6000819050611fca82611fa8565b919050565b6000611fda82611fbc565b9050919050565b611fea81611fcf565b82525050565b60006020820190506120056000830184611fe1565b92915050565b6003811061201c5761201b611f79565b5b50565b600081905061202d8261200b565b919050565b600061203d8261201f565b9050919050565b61204d81612032565b82525050565b60006020820190506120686000830184612044565b92915050565b600061207982611ec4565b9050919050565b6120898161206e565b82525050565b60006020820190506120a46000830184612080565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126120cf576120ce6120aa565b5b8235905067ffffffffffffffff8111156120ec576120eb6120af565b5b602083019150836001820283011115612108576121076120b4565b5b9250929050565b6000806020838503121561212657612125611e21565b5b600083013567ffffffffffffffff81111561214457612143611e26565b5b612150858286016120b9565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6121918161206e565b82525050565b60006121a38383612188565b60208301905092915050565b6000602082019050919050565b60006121c78261215c565b6121d18185612167565b93506121dc83612178565b8060005b8381101561220d5781516121f48882612197565b97506121ff836121af565b9250506001810190506121e0565b5085935050505092915050565b6000602082019050818103600083015261223481846121bc565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561227657808201518184015260208101905061225b565b83811115612285576000848401525b50505050565b6000601f19601f8301169050919050565b60006122a78261223c565b6122b18185612247565b93506122c1818560208601612258565b6122ca8161228b565b840191505092915050565b6122de81611ee4565b82525050565b60006101608201905081810360008301526122ff818e61229c565b90508181036020830152612313818d61229c565b9050612322604083018c611f4f565b8181036060830152612334818b61229c565b90508181036080830152612348818a61229c565b905081810360a083015261235c818961229c565b905081810360c0830152612370818861229c565b905061237f60e0830187611f4f565b61238d610100830186611f4f565b61239b6101208301856122d5565b6123a9610140830184611f4f565b9c9b505050505050505050505050565b60006020820190506123ce60008301846122d5565b92915050565b6000815190506123e381611e35565b92915050565b6000602082840312156123ff576123fe611e21565b5b600061240d848285016123d4565b91505092915050565b7f526f756e642069732066756c6c792066756e6465640000000000000000000000600082015250565b600061244c601583612247565b915061245782612416565b602082019050919050565b6000602082019050818103600083015261247b8161243f565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b60006124b8601283612247565b91506124c382612482565b602082019050919050565b600060208201905081810360008301526124e7816124ab565b9050919050565b7f596f7520686176652066756c6c7920636f6e747269627574656420746f20746860008201527f697320526f756e64000000000000000000000000000000000000000000000000602082015250565b600061254a602883612247565b9150612555826124ee565b604082019050919050565b600060208201905081810360008301526125798161253d565b9050919050565b600081905092915050565b50565b600061259b600083612580565b91506125a68261258b565b600082019050919050565b60006125bc8261258e565b9150819050919050565b7f4661696c656420746f2073656e642043454c4f00000000000000000000000000600082015250565b60006125fc601383612247565b9150612607826125c6565b602082019050919050565b6000602082019050818103600083015261262b816125ef565b9050919050565b7f416c72656164792050617965644f757400000000000000000000000000000000600082015250565b6000612668601083612247565b915061267382612632565b602082019050919050565b600060208201905081810360008301526126978161265b565b9050919050565b7f54686973206973206e6f7420796f757220726f756e6400000000000000000000600082015250565b60006126d4601683612247565b91506126df8261269e565b602082019050919050565b60006020820190508181036000830152612703816126c7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b600061275e61275961275484611ec4565b612739565b611ec4565b9050919050565b600061277082612743565b9050919050565b600061278282612765565b9050919050565b61279281612777565b82525050565b60006020820190506127ad6000830184612789565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127fa57607f821691505b6020821081141561280e5761280d6127b3565b5b50919050565b60008190508160005260206000209050919050565b60008154612836816127e2565b6128408186612247565b9450600182166000811461285b576001811461286d576128a0565b60ff19831686526020860193506128a0565b61287685612814565b60005b8381101561289857815481890152600182019150602081019050612879565b808801955050505b50505092915050565b600060208201905081810360008301526128c38184612829565b905092915050565b82818337600083830152505050565b60006128e68385612247565b93506128f38385846128cb565b6128fc8361228b565b840190509392505050565b600060208201905081810360008301526129228184866128da565b90509392505050565b7f496e76616c696420617574686f72697a6174696f6e20636f6465210000000000600082015250565b6000612961601b83612247565b915061296c8261292b565b602082019050919050565b6000602082019050818103600083015261299081612954565b9050919050565b7f596f752061726520616c72656164792061204d656d6265720000000000000000600082015250565b60006129cd601883612247565b91506129d882612997565b602082019050919050565b600060208201905081810360008301526129fc816129c0565b9050919050565b7f54686520726f756e64206973206e6f742066756c6c792066756e646564000000600082015250565b6000612a39601d83612247565b9150612a4482612a03565b602082019050919050565b60006020820190508181036000830152612a6881612a2c565b9050919050565b7f596f7572206368616d6161206973206c6f77206f6e2066756e64730000000000600082015250565b6000612aa5601b83612247565b9150612ab082612a6f565b602082019050919050565b60006020820190508181036000830152612ad481612a98565b9050919050565b7f447565206d656d626572206973206e6f742061206d656d62657221205265617260008201527f793f210000000000000000000000000000000000000000000000000000000000602082015250565b6000612b37602383612247565b9150612b4282612adb565b604082019050919050565b60006020820190508181036000830152612b6681612b2a565b9050919050565b6000604082019050612b826000830185612789565b612b8f6020830184611f4f565b9392505050565b612b9f81611e8e565b8114612baa57600080fd5b50565b600081519050612bbc81612b96565b92915050565b600060208284031215612bd857612bd7611e21565b5b6000612be684828501612bad565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c2982611e2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c5c57612c5b612bef565b5b600182019050919050565b6000606082019050612c7c6000830186612789565b612c896020830185611f4f565b612c966040830184611f4f565b949350505050565b6000819050919050565b6000612cb382612c9e565b9150612cbe83612c9e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615612cf957612cf8612bef565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615612d3157612d30612bef565b5b828201905092915050565b6000612d4782612c9e565b9150612d5283612c9e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612d9157612d90612bef565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612dce57612dcd612bef565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612e0b57612e0a612bef565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612e4857612e47612bef565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e8d82612c9e565b9150612e9883612c9e565b925082612ea857612ea7612e53565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615612ee157612ee0612bef565b5b828205905092915050565b6000612ef782612c9e565b9150612f0283612c9e565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615612f3d57612f3c612bef565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615612f7557612f74612bef565b5b828203905092915050565b6000612f8b82611e2b565b9150612f9683611e2b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612fcb57612fca612bef565b5b828201905092915050565b6000612fe182611e2b565b9150612fec83611e2b565b925082821015612fff57612ffe612bef565b5b828203905092915050565b600060808201905061301f6000830187611f4f565b61302c6020830186611f4f565b6130396040830185611f4f565b6130466060830184612080565b95945050505050565b60008190508160005260206000209050919050565b60008154613071816127e2565b61307b8186612247565b9450600182166000811461309657600181146130a8576130db565b60ff19831686526020860193506130db565b6130b18561304f565b60005b838110156130d3578154818901526001820191506020810190506130b4565b808801955050505b50505092915050565b600060208201905081810360008301526130fe8184613064565b905092915050565b60006020820190508181036000830152613120818461229c565b905092915050565b600061313382611e2b565b915061313e83611e2b565b92508261314e5761314d612e53565b5b828204905092915050565b600061316482611e2b565b915061316f83611e2b565b92508261317f5761317e612e53565b5b828206905092915050565b600061319582611e2b565b91506131a083611e2b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131d9576131d8612bef565b5b82820290509291505056fea26469706673582212207f89b73fcff04f96f4378af2e236d42704c2d46bcb4310ea688662a05f1fb25f64736f6c63430008090033a2646970667358221220691bcc517a9da988df7015c3e5902c007bbcad9b93882af3dc97bb8940ad9bad64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1287,
        "contract": "contracts/Spaces.sol:Spaces",
        "label": "roscas",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(Rosca)1271)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(Rosca)1271)dyn_storage": {
        "base": "t_contract(Rosca)1271",
        "encoding": "dynamic_array",
        "label": "contract Rosca[]",
        "numberOfBytes": "32"
      },
      "t_contract(Rosca)1271": {
        "encoding": "inplace",
        "label": "contract Rosca",
        "numberOfBytes": "20"
      }
    }
  }
}